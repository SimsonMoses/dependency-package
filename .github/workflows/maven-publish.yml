# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '8.0.412'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create new tag
        run: |
            git fetch --all --tags -f
            latest_tag=$(git tag | awk '/^v[0-9]+\.[0-9]+\.[0-9]+-pre-release$/ {print $0}' | sort -rV | head -n 1)
          
            if [[ $latest_tag == v* ]]; then
              version=$(echo "$latest_tag" | sed -e 's/^v//')
              version=$(echo "$version" | sed -e 's/-pre-release$//')
              major=$(echo "$version" | cut -d. -f1)
              minor=$(echo "$version" | cut -d. -f2)
              patch=$(echo "$version" | cut -d. -f3)
              if [[ $minor -eq 50 || $patch -eq 100 ]]; then
                major=$((major+1))
                minor=0
                patch=0
              elif [[ $patch -eq 50 ]]; then
                minor=$((minor+1))
                patch=0
              else
                patch=$((patch+1))
              fi
              new_tag="v$major.$minor.$patch-pre-release"
            else
              new_tag="v0.0.1-pre-release"
            fi
            echo "New tag: $new_tag"
            echo "VERSION=$new_tag" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitish: main
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: |
            Automated release generated by GitHub Actions. 
            For commit: ${{ env.COMMIT_HASH }}
          draft: false
          prerelease: true